package com.tomatoLCJC.main.fragment;

import android.content.pm.ActivityInfo;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.tomatoLCJC.main.R;
import com.tomatoLCJC.main.utils.ChangeButtonNumsUtil;
import com.tomatoLCJC.tools.Parameter.SystemParameter;
import com.tomatoLCJC.tools.ScanningChart.ScanningService;
import com.tomatoLCJC.tools.chart.ChartService;

import org.achartengine.GraphicalView;
import java.util.ArrayList;
import java.util.List;

/**
 * 磁力测量页面
 */
public class FragmentDataMeasure extends Fragment {

    public ChartService mService = null;        // 画折线图工具类
    private LinearLayout chartLayout_1;         // 存放折线图的 Layout
    private LinearLayout scanChart;             // 存放扫描图的 Layout
    private GraphicalView mGraphicalView;       // 折线图的 view
    public ScanningService scanView;            // 扫描图的 view
    private LinearLayout ChannelButtonLayout;   // 存放通道选择按钮的 Layout
    private LinearLayout bigChartLayout;        // 存放大图的 Layout
    private GraphicalView bigGraphicalView;     // 大图的 view
    private PopupWindow mPopupWindow;           // 弹出窗

    // 下面几行是在折线图手势触摸中要用到的几个变量
    private long upTime = 0;       // 手指抬起时的时间，用于控制双击事件
    private float xDown;           // 一个手指刚按下时的 x 坐标
    private double xMin1, xMin2;   // 竖屏和横屏状态下折线图横轴最左侧的坐标值，用来记录水平移动的距离
    public float canvasWidth;      // 竖屏状态下扫描图的横向距离
    private boolean ifTranslate;   // 为了防止当两根手指中的一根抬起后，另一根手指继续移动导致瞬移，加入标志位，
                                   // 如果其为 true，则停止平移的功能，否则开启平移的功能
    public boolean fromScanChart;  // 判断当前大图是否是扫描图的标志位

    // 单例模式
    private static FragmentDataMeasure fragmentDataMeasure = null;
    public static FragmentDataMeasure getInstance() {
        if (fragmentDataMeasure == null) {
            fragmentDataMeasure = new FragmentDataMeasure();
        }
        return fragmentDataMeasure;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        if (container == null) {
            return null;
        }
        super.onCreate(savedInstanceState);
        final View view = inflater.inflate(R.layout.fragment_datameasure, container, false);
        // 折线图
        chartLayout_1 = (LinearLayout) view.findViewById(R.id.chart_1);
        // 扫描图
        scanChart = (LinearLayout) view.findViewById(R.id.scan_chart);

        ChannelButtonLayout = (LinearLayout) view.findViewById(R.id.channelButtonGroupLayout);
        // 下面是实现关于双击小图后切换到横屏的功能
        View bigChartView = getActivity().getLayoutInflater().inflate(R.layout.fragment_bigchart,
                null);
        bigChartLayout = (LinearLayout) bigChartView.findViewById(R.id.bigChart);
        ImageView backBtn = (ImageView) bigChartView.findViewById(R.id.back);
        // 初始化弹出框
        mPopupWindow = new PopupWindow(bigChartView, ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT, true);
        mPopupWindow.setTouchable(true);
        mPopupWindow.setOutsideTouchable(true);
        mPopupWindow.setBackgroundDrawable(new BitmapDrawable(getResources(), (Bitmap) null));

        // 监听事件，popupWindow 被撤销时屏幕锁定为竖屏
        mPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            public void onDismiss(){
                mService.setViewFlag(false);
                getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
                bigChartLayout.removeAllViews();
                ViewGroup parent = (ViewGroup) scanView.getParent();
                if (parent != null) {
                    parent.removeAllViews();
                }
                scanChart.addView(scanView);
            }
        });

        // 大图返回事件
        backBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                mService.setViewFlag(false);
                getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
                mPopupWindow.dismiss();

                // 如果大图是折线图的大图，那么返回时需要对扫描图进行同步处理
                if (!fromScanChart) {
                    // 平移
                    xMin2 = mService.getMultipleSeriesRenderer().getXAxisMin();
                    double xTranslate = xMin1 - xMin2;
                    scanView.xTransform(xTranslate, canvasWidth);
                    // 缩放
                    float scale = scanView.getXDistance() /
                            (float) (mService.getMultipleSeriesRenderer().getXAxisMax() -
                                    mService.getMultipleSeriesRenderer().getXAxisMin());
                    scanView.setXScale(scale);
                    scanView.setYScale(scale);
                }
                // 同步折线图
                double xTrans = scanView.getXTranslate() / canvasWidth * scanView.getXDistance();
                syncGraphicalView(xTrans);
            }
        });
        return view;
    }

    // 每次执行 onResume() 方法都重新初始化画图工具类的参数
    @Override
    public void onResume() {
        super.onResume();
        // 根据系统参数初始化图表和通道按钮数量
        int channelNum = SystemParameter.getInstance().nChannelNumber;
        initChartAndChannelButtonNum(channelNum);
    }

    // 根据参数channelNum初始化图标和通道按钮数量
    public void initChartAndChannelButtonNum(int channelNum){
        // 重新初始化画图工具类的参数
        mService = new ChartService(getActivity(), channelNum,3);
        mService.setXYMultipleSeriesDataset("");
        mService.setXYMultipleSeriesRenderer();
        mGraphicalView = mService.getGraphicalView(); // 折线图的小图
        mGraphicalView.setClickable(true);
        bigGraphicalView = mService.getGraphicalView_1(); // 折线图的大图
        scanView = new ScanningService(getContext()); // 扫描图的小图

        // 将创建的图表加入 Layout
        chartLayout_1.removeAllViews();
        chartLayout_1.addView(mGraphicalView, new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        scanChart.removeAllViews();
        scanChart.addView(scanView);

        // 设置折线图的触摸事件，使扫描图保持同步平移和缩放
        mGraphicalView.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent event) {
                switch (event.getAction()) {
                    // 手指抬起
                    case MotionEvent.ACTION_UP:
                        upTime = event.getEventTime();
                        // 标志位置为 false，开启平移功能
                        ifTranslate = false;
                        break;
                    // 手指按下
                    case MotionEvent.ACTION_DOWN:
                        if (event.getPointerCount() == 1) {
                            xDown = event.getX();
                        } else if (event.getPointerCount() == 2) {
                            xDown = 0;
                        }
                        // 双击事件，跳转到大图
                        if (event.getEventTime() - upTime < 200) {
                            // 绘制折线图的大图
                            mService.setViewFlag(true);
                            bigChartLayout.removeAllViews();
                            bigChartLayout.addView(bigGraphicalView);
                            bigGraphicalView.setClickable(true);
                            mPopupWindow.showAtLocation(mGraphicalView, 0, 0, 0);
                            getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); // 锁定横屏
                            xMin1 = mService.getMultipleSeriesRenderer().getXAxisMin(); // 竖屏状态下折线图横轴最左侧的坐标值
                            canvasWidth = scanView.getCanvasWidth(); // 竖屏状态下扫描图的横向距离
                            fromScanChart = false;
                        }
                        break;
                    // 手指移动
                    case MotionEvent.ACTION_MOVE:
                        // 一根手指
                        if (event.getPointerCount() == 1) {
                            // 只有开启平移功能后才能移动
                            if (!ifTranslate) {
                                scanView.addXTranslate((event.getX() - xDown) / scanView.getXScale());
                                xDown = event.getX();
                                break;
                            }
                        // 两根手指
                        } else if (event.getPointerCount() == 2) {
                            float x = (float) (mService.getMultipleSeriesRenderer().getXAxisMax() -
                                    mService.getMultipleSeriesRenderer().getXAxisMin());
                            scanView.setXScale((scanView.getXDistance() / x));
                            scanView.setYScale(scanView.getXDistance() / x);
                            break;
                        }
                    // 两根手指中的左边一根抬起时
                    case 262:
                        xDown = event.getX();
                        // 防止瞬移，将标志位置为 true，停止移动
                        ifTranslate = true;
                        break;
                    // 两根手指中的右边一根抬起时
                    case 6:
                        xDown = event.getX(1);
                        // 防止瞬移，将标志位置为 true，停止移动
                        ifTranslate = true;
                        break;
                }
                // 只有当返回 false 时才会开启手势检测效果，否则折线图将无法移动和缩放
                return ifTranslate;
            }
        });

        TextView primary_curve= (TextView) getActivity().findViewById(R.id.primary);
        primary_curve.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mService.resetXYAxis();
                scanView.setXScale(1);
                scanView.setYScale(1);
                scanView.setXTranslate(0);
                scanView.setYTranslate(0);
            }
        });
        TextView horizontal_curve= (TextView) getActivity().findViewById(R.id.horizontal_curve);
        horizontal_curve.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mService.resetXYAxis();
                scanView.setXScale(1);
                scanView.setYScale(1);
                scanView.setXTranslate(0);
                scanView.setYTranslate(0);
            }
        });
        // 更新通道按钮数
        ChangeButtonNumsUtil changeButtonNumsUtil = new ChangeButtonNumsUtil(channelNum,
                ChannelButtonLayout, getActivity(),mService,null);
        changeButtonNumsUtil.initChannelButtons();
    }

    // 将扫描图添加至大图
    public void addToBigScanChart() {
        ViewGroup parent = (ViewGroup) scanView.getParent();
        if (parent != null) {
            parent.removeAllViews();
        }
        bigChartLayout.addView(scanView);
        mPopupWindow.showAtLocation(scanView, 0, 0, 0);
        getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); // 锁定横屏
        FragmentDataMeasure.getInstance().fromScanChart = true;
    }

    public void cleanScanningChart() {
        scanView = new ScanningService(getContext());
        scanChart.removeAllViews();
        scanChart.addView(scanView);
    }

    // 画历史记录图
    public void drawHistoryChart(List<Double> xList,List<ArrayList<Double>> yList,
                                 List<ArrayList<Double>> denoisingValue,
                                 List<ArrayList<Double>> flawValue,String title ,int channelNum){
        initChartAndChannelButtonNum(channelNum); //重新初始化
        mService.drawHistoryChart(xList,denoisingValue,title);//去噪后的曲线
        // 添加扫描图
        scanView = new ScanningService(getContext(), xList, yList, flawValue);
        scanChart.removeAllViews();
        scanChart.addView(scanView);
        scanView.setClickable(true);
    }

    // 同步折线图
    public void syncGraphicalView(double xTrans) {
        // 更新折线图
        FragmentDataMeasure.getInstance().mService.getMultipleSeriesRenderer()
                .setXAxisMin(-xTrans -
                        (scanView.getXDistance() / scanView.getXScale() - scanView.getXDistance()) / 2);
        FragmentDataMeasure.getInstance().mService.getMultipleSeriesRenderer()
                .setXAxisMax(scanView.getXDistance() - xTrans + (scanView.getXDistance() / scanView.getXScale() - scanView.getXDistance()) / 2);
        // 重绘折线图
        FragmentDataMeasure.getInstance().mGraphicalView.repaint();
    }

    // 获得第一个图标的屏幕截图
    public Bitmap picCut(){
        chartLayout_1.setDrawingCacheEnabled(true);
        Bitmap tBitmap = chartLayout_1.getDrawingCache();
        // 拷贝图片，否则在setDrawingCacheEnabled(false)以后该图片会被释放掉
        tBitmap = tBitmap.createBitmap(tBitmap);
        chartLayout_1.setDrawingCacheEnabled(false);
        if (tBitmap != null) {
            return tBitmap;
        } else {
            return null;
        }
    }

}

